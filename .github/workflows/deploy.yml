name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    name: Run Testes Django
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: mentha_test
          POSTGRES_USER: mentha
          POSTGRES_PASSWORD: mentha123
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DJANGO_ENV: test
      SECRET_KEY: test-secret
      POSTGRES_DB: mentha_test
      POSTGRES_USER: mentha
      POSTGRES_PASSWORD: mentha123
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django migrations
        run: |
          python manage.py migrate

      - name: Run tests (placeholder)
        run: |
          python manage.py test

  deploy:
    name: Deploy para Produção (Servidor)
    runs-on: ubuntu-latest
    needs: test  

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy project files via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "."
          target: "~/mentha_project"

      - name: Run Docker Compose (Production) on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/mentha_project
            echo "DJANGO_ENV=production" > .env
            echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRES_HOST=dbpostgresql" >> .env
            echo "POSTGRES_PORT=5432" >> .env

            docker-compose -f compose.prod.yaml down
            docker-compose -f compose.prod.yaml up -d --build